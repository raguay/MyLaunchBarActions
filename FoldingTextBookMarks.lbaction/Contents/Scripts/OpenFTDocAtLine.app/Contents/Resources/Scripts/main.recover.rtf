{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red64\green128\blue0;\red76\green78\blue78;
\red108\green5\blue211;\red0\green22\blue176;\red0\green0\blue255;}
\deftab480
\pard\pardeftab480\slleading20\pardirnatural

\f0\b\fs24 \cf2 property
\b0  \cf3 pTitle\cf2  : "Register and handle ftdoc:// url scheme"\

\b property
\b0  \cf3 pVer\cf2  : "0.03"\

\b property
\b0  \cf3 pAuthor\cf2  : "Rob Trew"\

\b property
\b0  \cf3 pDescription\cf2  : "\
\
	Use in conjunction with the 'FTCopyAsURL' Applescript to get\
	a URL which opens the specified document, optionally restoring selection and filter state.\
\
"\
\
\cf4 -- Registers the url-scheme ftdoc://encoded-file-path with optional switches:\cf2 \
\cf4 --[?nodepath=//@due] -- nodepath used to apply a filter\cf2 \
\cf4 --[?selnpath=] -- nodepath used to specify a selection\cf2 \
\cf4 --[?find=] -- text string to find\cf2 \
\cf4 --[?line=N][?startoffset=0][?endoffset=-1]\cf2 \
\
\cf4 -- where line is zero-based and defaults to 0\cf2 \
\cf4 -- startoffset is an offset of a number of characters from the start of the line\cf2 \
\cf4 -- endoffset is ditto\cf2 \
\
\cf4 -- and the url opens the document in FoldingText:\cf2 \
\cf4 -- 1. Applying any specified ?nodepath= value as a filter\cf2 \
\cf4 -- 2. Selecting the first line that matches (in the following order)\cf2 \
\cf4 --	--	the value of ?selnpath= ?find= or ?line=\cf2 \
\cf4 -- 3. Restricts the selection to a subset of a line selected by number if startoffset > 0 or endoffset \uc0\u8800  -1\cf2 \
\
\cf4 -- for the approach to registering and handling a url with an applescript.app and the .plist in its bundle,\cf2 \
\cf4 -- see http://www.macosxautomation.com/applescript/linktrigger/\cf2 \
\

\b property
\b0  \cf3 piNodePath\cf2  : 1\

\b property
\b0  \cf3 piSelnPath\cf2  : 2\

\b property
\b0  \cf3 piFindText\cf2  : 3\

\b property
\b0  \cf3 piLine\cf2  : 4\

\b property
\b0  \cf3 piStartOffset\cf2  : 5\

\b property
\b0  \cf3 piEndOffset\cf2  : 6\
\

\b property
\b0  \cf3 plstKeys\cf2  : \{"nodepath", "selnpath", "find", "line", "startoffset", "endoffset"\}\

\b property
\b0  \cf3 plngKeys\cf2  : \cf5 length\cf2  
\b of
\b0  \cf3 plstKeys\cf2 \
\

\b property
\b0  \cf3 pjsSelect\cf2  : "\
\
function(editor, options) \{\
	function getValue(strSwitch) \{\
		return lstSwitches[lstSwitches.indexOf('?' + strSwitch + '=')+1];\
	\}\
	\
	var	tree= editor.tree(),\
		oNode, rngSeln,\
		//options.filepath, options.switches, options.keys\
		lstKeys = options.keys,\
		strRegex = '(\\\\\\\\?' + lstKeys.join('=|\\\\\\\\?') + '=)',\
		oRegex = new RegExp(strRegex, 'g'),\
		strPath = decodeURIComponent(options.filepath), \
		strSwitches = decodeURIComponent(options.switches),\
		lstSwitches = strSwitches.split(oRegex),\
		strPath, strLineNum,\
		strSelnPath,\
		strFind,\
		strStartOffset, strEndOffset,\
		lngLine, lngStartOffset=0, lngEndOffset=-1,\
		varStartOffset, varEndOffset,\
		lstMatches=[], lstRanges=[], i;\
		\
	\
	// Try to restore any selection that is specified\
	if (strPath = getValue('nodepath')) \{\
		//restore any filter\
		editor.setNodePath(strPath);\
	\}\
		\
	\
	strSelnPath = getValue('selnpath');\
	strFind = getValue('find');\
	\
	if (strSelnPath || strFind) \{\
		if (strSelnPath) \{\
			lstMatches = tree.evaluateNodePath(strSelnPath);\
		\}\
		if (strFind && (lstMatches.length == 0)) \{\
			lstMatches = tree.evaluateNodePath('//\\"' + strFind + '\\"');\
		\}\
		if (lstMatches.length) \{\
			lstMatches.forEach(function(varNode) \{\
				lstRanges.push(tree.createRangeFromNodes(\
					varNode, 0, varNode, -1));\
				// unfold if this range is hidden\
				if (editor.nodeIsHiddenInFold(varNode)) \{\
					editor.expandToRevealNode(varNode);\
				\}\
			\});\
			editor.setSelectedRanges(lstRanges);\
			//Make sure that at least the first of any selections is visible\
			editor.scrollRangeToVisible(lstRanges[0]);\
		\}\
	\} else \{\
		\
		// make any selection specified by line number etc\
		if (strLine = getValue('line')) \{\
			lngLine = parseInt(strLine, 10);\
			if (!(isNaN(lngLine))) \{\
				oNode = tree.lineNumberToNode(lngLine);\
				if (editor.nodeIsHiddenInFold(oNode)) \{\
					editor.expandToRevealNode(oNode);\
					editor.scrollToLine(lngLine);\
				\}\
		\
				if (strStartOffset = getValue('startoffset')) \{\
					varStartOffset = parseInt(strStartOffset, 10);\
					if (!isNaN(varStartOffset)) \{\
						lngStartOffset = varStartOffset;\
					\}\
				\}\
		\
				if (strEndOffset = getValue('endoffset')) \{\
					varEndOffset = parseInt(strEndOffset, 10);\
					if (!isNaN(varEndOffset)) \{\
						lngEndOffset = varEndOffset;\
					\}\
				\}\
\
				rngSeln = tree.createRangeFromNodes(\
					oNode, lngStartOffset, oNode, lngEndOffset);\
				editor.setSelectedRange(rngSeln);\
			\}\
		\}\
	\}\
\}\
"\
\

\b on
\b0  
\b \cf6 open location
\b0 \cf2  \cf3 strURL\cf2 \
	
\b set
\b0  \cf3 recParse\cf2  
\b to
\b0  \cf3 pathAndSwitches\cf2 (\cf3 strURL\cf2 )\
	
\b if
\b0  \cf3 recParse\cf2  
\b is
\b0  
\b not
\b0  
\i \cf7 missing value
\i0 \cf2  
\b then
\b0 \
		
\b set
\b0  \cf3 strPath\cf2  
\b to
\b0  \cf3 urldecode\cf2 (\cf3 filepath\cf2  
\b of
\b0  \cf3 recParse\cf2 )\
		\
		
\b tell
\b0  
\i \cf7 application
\i0 \cf2  "FoldingText"\
			
\b set
\b0  \cf3 oDoc\cf2  
\b to
\b0  (
\b \cf7 open
\b0 \cf2  \cf3 strPath\cf2 )\
			
\b tell
\b0  \cf3 oDoc\cf2 \
				
\b set
\b0  \cf3 varResult\cf2  
\b to
\b0  (
\b \cf7 evaluate
\b0 \cf2  \cf7 script\cf2  \cf3 pjsSelect\cf2  \cf7 with options\cf2  (\cf3 recParse\cf2  & \{\cf3 keys\cf2 :\cf3 plstKeys\cf2 \}))\
			
\b end
\b0  
\b tell
\b0 \
			
\b \cf7 activate
\b0 \cf2 \
		
\b end
\b0  
\b tell
\b0 \
	
\b end
\b0  
\b if
\b0 \

\b end
\b0  
\b \cf6 open location
\b0 \cf2 \
\
\cf4 --on getDoc(strPath)\cf2 \
\cf4 --	tell application "FoldingText"\cf2 \
\cf4 --		set lstDoc to documents\cf2 \
\cf4 --		repeat with oDoc in lstDoc\cf2 \
\cf4 --			set oFile to file of oDoc\cf2 \
\cf4 --			if oFile is not missing value then\cf2 \
\cf4 --				if (POSIX path of ((oFile) as alias)) = strPath then\cf2 \
\cf4 --					activate\cf2 \
\cf4 --					return oDoc\cf2 \
\cf4 --				end if\cf2 \
\cf4 --			end if\cf2 \
\cf4 --		end repeat\cf2 \
\cf4 --		set oDoc to (open strPath)\cf2 \
\cf4 --		activate\cf2 \
\cf4 --		return oDoc\cf2 \
\cf4 --	end tell\cf2 \
\cf4 --end getDoc\cf2 \
\

\b on
\b0  \cf3 pathAndSwitches\cf2 (\cf3 strURL\cf2 )\
	\cf4 -- we can't simply split on '?' as there may be '?' in the text\cf2 \
	\cf4 -- extracting the file in .js would require an active document, \cf2 \
	\cf4 -- so we do it here to save the time and distraction caused by creating one \cf2 \
	
\b set
\b0  \{\cf3 dlm\cf2 , 
\b my
\b0  \cf5 text item delimiters\cf2 \} 
\b to
\b0  \{
\b my
\b0  \cf5 text item delimiters\cf2 , "ftdoc://"\}\
	
\b set
\b0  \cf3 lstParts\cf2  
\b to
\b0  
\i \cf7 text items
\i0 \cf2  
\b of
\b0  \cf3 strURL\cf2 \
	
\b if
\b0  \cf5 length\cf2  
\b of
\b0  \cf3 lstParts\cf2  < 2 
\b then
\b0 \
		
\b set
\b0  \cf3 varParse\cf2  
\b to
\b0  
\i \cf7 missing value
\i0 \cf2 \
	
\b else
\b0 \
		
\b set
\b0  \cf3 strTarget\cf2  
\b to
\b0  
\i \cf7 item
\i0 \cf2  2 
\b of
\b0  \cf3 lstParts\cf2 \
		
\b set
\b0  \cf3 lngClosest\cf2  
\b to
\b0  \cf5 length\cf2  
\b of
\b0  \cf3 strTarget\cf2 \
		
\b repeat
\b0  
\b with
\b0  \cf3 varKey\cf2  
\b in
\b0  \cf3 plstKeys\cf2 \
			
\b set
\b0  
\b my
\b0  \cf5 text item delimiters\cf2  
\b to
\b0  ("?" & \cf3 varKey\cf2  & "=")\
			
\b set
\b0  \cf3 lstParts\cf2  
\b to
\b0  
\i \cf7 text items
\i0 \cf2  
\b of
\b0  \cf3 strTarget\cf2 \
			
\b if
\b0  \cf5 length\cf2  
\b of
\b0  \cf3 lstParts\cf2  > 1 
\b then
\b0 \
				
\b set
\b0  \cf3 lngPosn\cf2  
\b to
\b0  \cf5 length\cf2  
\b of
\b0  
\i \cf7 item
\i0 \cf2  1 
\b of
\b0  \cf3 lstParts\cf2 \
				
\b if
\b0  \cf3 lngPosn\cf2  < \cf3 lngClosest\cf2  
\b then
\b0  
\b set
\b0  \cf3 lngClosest\cf2  
\b to
\b0  \cf3 lngPosn\cf2 \
			
\b end
\b0  
\b if
\b0 \
		
\b end
\b0  
\b repeat
\b0 \
		
\b set
\b0  \cf3 strPath\cf2  
\b to
\b0  
\i \cf7 text
\i0 \cf2  1 
\b thru
\b0  \cf3 lngClosest\cf2  
\b of
\b0  \cf3 strTarget\cf2 \
		
\b set
\b0  \cf3 strSwitches\cf2  
\b to
\b0  
\i \cf7 text
\i0 \cf2  (\cf3 lngClosest\cf2  + 1) 
\b thru
\b0  -1 
\b of
\b0  \cf3 strTarget\cf2 \
		
\b set
\b0  \cf3 varParse\cf2  
\b to
\b0  \{\cf3 filepath\cf2 :\cf3 strPath\cf2 , \cf3 switches\cf2 :\cf3 strSwitches\cf2 \}\
	
\b end
\b0  
\b if
\b0 \
	
\b set
\b0  
\b my
\b0  \cf5 text item delimiters\cf2  
\b to
\b0  \cf3 dlm\cf2 \
	
\b return
\b0  \cf3 varParse\cf2 \

\b end
\b0  \cf3 pathAndSwitches\cf2 \
\
\cf4 -- based on http://harvey.nu/applescript_url_decode_routine.html\cf2 \

\b on
\b0  \cf3 urldecode\cf2 (\cf3 theText\cf2 )\
	
\b set
\b0  \cf3 sDst\cf2  
\b to
\b0  ""\
	
\b set
\b0  \cf3 sHex\cf2  
\b to
\b0  "0123456789ABCDEF"\
	
\b set
\b0  \cf3 i\cf2  
\b to
\b0  1\
	
\b repeat
\b0  
\b while
\b0  \cf3 i\cf2  \uc0\u8804  \cf5 length\cf2  
\b of
\b0  \cf3 theText\cf2 \
		
\b set
\b0  \cf3 c\cf2  
\b to
\b0  
\i \cf7 character
\i0 \cf2  \cf3 i\cf2  
\b of
\b0  \cf3 theText\cf2 \
		
\b if
\b0  \cf3 c\cf2  = "+" 
\b then
\b0 \
			
\b set
\b0  \cf3 sDst\cf2  
\b to
\b0  \cf3 sDst\cf2  & " "\
		
\b else
\b0  
\b if
\b0  \cf3 c\cf2  = "%" 
\b then
\b0 \
			
\b if
\b0  \cf3 i\cf2  > ((\cf5 length\cf2  
\b of
\b0  \cf3 theText\cf2 ) - 2) 
\b then
\b0 \
				
\b tell
\b0  
\i \cf7 application
\i0 \cf2  "System Events"\
					
\b \cf7 activate
\b0 \cf2 \
					
\b \cf6 display dialog
\b0 \cf2  ("Invalid URL Encoded string - missing hex char") \cf6 buttons\cf2  \{"OK"\} \cf6 default button\cf2  "OK" \cf6 with title\cf2  \cf3 pTitle\cf2  & "  ver. " & \cf3 pVer\cf2 \
				
\b end
\b0  
\b tell
\b0 \
				
\b return
\b0  ""\
			
\b end
\b0  
\b if
\b0 \
			
\b set
\b0  \cf3 iCVal1\cf2  
\b to
\b0  (
\b \cf6 offset
\b0 \cf2  \cf6 of\cf2  (
\i \cf7 character
\i0 \cf2  (\cf3 i\cf2  + 1) 
\b of
\b0  \cf3 theText\cf2 ) \cf6 in\cf2  \cf3 sHex\cf2 ) - 1\
			
\b set
\b0  \cf3 iCVal2\cf2  
\b to
\b0  (
\b \cf6 offset
\b0 \cf2  \cf6 of\cf2  (
\i \cf7 character
\i0 \cf2  (\cf3 i\cf2  + 2) 
\b of
\b0  \cf3 theText\cf2 ) \cf6 in\cf2  \cf3 sHex\cf2 ) - 1\
			
\b if
\b0  \cf3 iCVal1\cf2  = -1 
\b or
\b0  \cf3 iCVal2\cf2  = -1 
\b then
\b0 \
				
\b tell
\b0  
\i \cf7 application
\i0 \cf2  "System Events"\
					
\b \cf7 activate
\b0 \cf2 \
					
\b \cf6 display dialog
\b0 \cf2  ("Invalid URL Encoded string - not 2 hex chars after % sign") \cf6 buttons\cf2  \{"OK"\} \cf6 default button\cf2  "OK" \cf6 with title\cf2  \cf3 pTitle\cf2  & "  ver. " & \cf3 pVer\cf2 \
				
\b end
\b0  
\b tell
\b0 \
				
\b return
\b0  ""\
			
\b end
\b0  
\b if
\b0 \
			
\b set
\b0  \cf3 sDst\cf2  
\b to
\b0  \cf3 sDst\cf2  & (
\b \cf6 ASCII character
\b0 \cf2  (\cf3 iCVal1\cf2  * 16 + \cf3 iCVal2\cf2 ))\
			
\b set
\b0  \cf3 i\cf2  
\b to
\b0  \cf3 i\cf2  + 2\
		
\b else
\b0 \
			
\b set
\b0  \cf3 sDst\cf2  
\b to
\b0  \cf3 sDst\cf2  & \cf3 c\cf2 \
		
\b end
\b0  
\b if
\b0 \
		
\b set
\b0  \cf3 i\cf2  
\b to
\b0  \cf3 i\cf2  + 1\
	
\b end
\b0  
\b repeat
\b0 \
	
\b return
\b0  \cf3 sDst\cf2 \

\b end
\b0  \cf3 urldecode\cf2 \
\
\
\cf4 -- "ftdoc://encoded-file-path[?nodepath=//@due][?line=N][?startoffset=0][?endoffset=-1]"\cf2 \
\
}